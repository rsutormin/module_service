/* SpecParser.java */
/* Generated By:JavaCC: Do not edit this line. SpecParser.java */
package us.kbase.moduleservice.gwt.client.parser;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

/**
 * Do not change this file. It's automatically generated based on src/kbase/jkidl/SpecParser.jj
 * using shell script in javacc/spec_javacc.sh . So please change parsing syntax and semantics
 * in SpecParser.jj .
 * @author rsutormin
 */
@SuppressWarnings({"unused", "serial"})
public class SpecParser implements SpecParserConstants {
        static String lastComment = null;
        static Integer lastCommentEndLine = null;

    public CustomParseException generateParseException(KidlParseException t) throws ParseException {
        return generateParseException(t.getMessage());
    }

    public CustomParseException generateParseException(String message) throws ParseException {
        return new CustomParseException("Error at line " + token.beginLine + ", column " + token.beginColumn + ": " + message, token);
    }

    public String getLastComment(Token first) {
        String comment = lastComment;
        lastComment = null;
        if (comment == null)
                return "";
        //if (first.beginLine > lastCommentEndLine + 1)
        //	return "";
        return Utils.trim(comment);
    }

    public void addTypedefToken(ModuleTokens mt, String type, Token first, Token last) {
        int startRow = first.beginLine - 1;
        int startCol = first.beginColumn - 1;
        int endRow = last.beginLine - 1;
        int endCol = last.beginColumn - 1;
        mt.typedefToRowCol.put(type, new int[] {startRow, startCol, endRow, endCol});
    }

    public void addModuleUsageToken(ModuleTokens mt, Token t) {
        addUsageToken(mt, t, new String[] { t.toString() });
    }

    public void addTypeUsageToken(ModuleTokens mt, String module, Token t) {
        addUsageToken(mt, t, new String[] { module, t.toString() });
    }

    public void addUsageToken(ModuleTokens mt, Token t, String[] value) {
        int row = t.beginLine - 1;
        int col = t.beginColumn - 1;
        Map<Integer, String[]> colToInfo = mt.rowToColToModuleType.get(row);
        if (colToInfo == null) {
                colToInfo = new TreeMap<Integer, String[]>();
                mt.rowToColToModuleType.put(row, colToInfo);
        }
        colToInfo.put(col, value);
    }

    public void checkTokenAlternative(CustomParseException ex, String prefix, String alt) {
        if (alt.startsWith(prefix))
                ex.getAltKeywords().add(alt);
    }

/**
 * Main parsing method. It iterates over includes and after that over modules.
 */
  final public Map<String, KbModule> SpecStatement(IncludeProvider ip, ModuleTokens mt) throws ParseException {Map<String, KbModule> ret = new LinkedHashMap<String, KbModule>();
  Map<String, KbModule> includes = null;
lastComment = null;
    includes = IncludeList(ip, mt);
    ret = ModuleList(includes, mt);
    jj_consume_token(0);
return ret;
  }

/**
 * Method iterates over includes.
 */
  final public Map<String, KbModule> IncludeList(IncludeProvider ip, ModuleTokens mt) throws ParseException {Map<String, KbModule> ret = new LinkedHashMap<String, KbModule>();
  Map<String, KbModule> added = null;
  String includeLine = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCLUDE_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      added = Include(ip, mt);
ret.putAll(added);
    }
return ret;
  }

/**
 * Method parses one include line.
 */
  final public Map<String, KbModule> Include(IncludeProvider ip, ModuleTokens mt) throws ParseException {Token pathToken;
    pathToken = jj_consume_token(INCLUDE_LITERAL);
try {
            addModuleUsageToken(mt, pathToken);
            return ip.parseInclude(pathToken.toString());
        } catch (KidlParseException ex) {
                {if (true) throw generateParseException(ex);}
        }
        return null;
  }

/**
 * Method iterates over modules.
 */
  final public Map<String, KbModule> ModuleList(Map<String, KbModule> includes, ModuleTokens mt) throws ParseException {Map<String, KbModule> ret = new LinkedHashMap<String, KbModule>();
  KbModule module = null;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_module:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      module = Module(includes, mt);
ret.put(module.getModuleName(), module);
      includes.put(module.getModuleName(), module);
    }
return ret;
  }

/**
 * Method parses one module. So it iterates over module components (typedefs, funcdefs and auths).
 * They are separated by semicolon.
 */
  final public KbModule Module(Map<String, KbModule> includes, ModuleTokens mt) throws ParseException {Token first = null;
  KbModule ret = null;
  String comment = null;
  Token srvToken = null;
  Token nameToken = null;
    first = jj_consume_token(T_module);
comment = getLastComment(first);
    if (jj_2_1(2147483647)) {
      srvToken = jj_consume_token(S_IDENTIFIER);
      jj_consume_token(T_colon);
    } else {
      ;
    }
    nameToken = jj_consume_token(S_IDENTIFIER);
ret = new KbModule(nameToken.toString(), comment);
    jj_consume_token(T_figure_open_bracket);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_auth:
      case T_typedef:
      case T_funcdef:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_typedef:{
        Typedef(ret, includes, mt);
        break;
        }
      case T_funcdef:{
        Funcdef(ret, includes, mt);
        break;
        }
      case T_auth:{
        Auth();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(T_semicolon);
lastComment = null;
      //ret.addModuleComponent(comp);

    }
    jj_consume_token(T_figure_close_bracket);
    jj_consume_token(T_semicolon);
return ret;
  }

/**
 * Method parses type definition (one of scalar, unspecified object, list, mapping, tuple, structure and 
 * reference to another typedef).
 */
  final public void Typedef(KbModule curModule, Map<String, KbModule> includes, ModuleTokens mt) throws ParseException {Token first;
  String comment;
  Token name;
    first = jj_consume_token(T_typedef);
comment = getLastComment(first);
    Type(curModule, includes, mt);
    name = jj_consume_token(S_IDENTIFIER);
curModule.getTypeToDoc().put(name.toString(), comment);
        addTypedefToken(mt, name.toString(), first, name);
  }

/**
 * Method parses nameless type definition which can be used in typedefs, funcdefs and as part of 
 * another type. This type can be one of scalar, unspecified object, list, mapping, tuple, structure and 
 * reference to another typedef). Structure can't be type of funcdef parameter or part of another type. 
 */
  final public void Type(KbModule curModule, Map<String, KbModule> includes, ModuleTokens mt) throws ParseException {Token t = null;
  Token moduleToken = null;
  Token typeToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_string:{
      t = jj_consume_token(T_string);
      break;
      }
    case T_int:{
      t = jj_consume_token(T_int);
      break;
      }
    case T_float:{
      t = jj_consume_token(T_float);
      break;
      }
    case T_unobj:{
      t = jj_consume_token(T_unobj);
      break;
      }
    case T_list:{
      t = jj_consume_token(T_list);
      jj_consume_token(38);
      Type(curModule, includes, mt);
      jj_consume_token(39);
      break;
      }
    case T_mapping:{
      t = jj_consume_token(T_mapping);
      jj_consume_token(38);
      Type(curModule, includes, mt);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(T_comma);
      Type(curModule, includes, mt);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(39);
      break;
      }
    case T_tuple:{
      t = jj_consume_token(T_tuple);
      jj_consume_token(38);
      OptNameParam(curModule, includes, mt);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_comma:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        jj_consume_token(T_comma);
        OptNameParam(curModule, includes, mt);
      }
      jj_consume_token(39);
      break;
      }
    case T_structure:{
      t = jj_consume_token(T_structure);
      jj_consume_token(T_figure_open_bracket);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_string:
        case T_int:
        case T_float:
        case T_unobj:
        case T_list:
        case T_mapping:
        case T_structure:
        case T_tuple:
        case S_IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        StructItem(curModule, includes, mt);
        jj_consume_token(T_semicolon);
      }
      jj_consume_token(T_figure_close_bracket);
      break;
      }
    case S_IDENTIFIER:{
      typeToken = jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_dot:{
        jj_consume_token(T_dot);
moduleToken = typeToken;
        typeToken = jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
String module = moduleToken == null ? null : moduleToken.toString();
        KbModule refModule = null;
        if (module == null || module.equals(curModule.getModuleName())) {
                refModule = curModule;
        } else {
                refModule = includes.get(module);
                if (refModule == null)
                        {if (true) throw generateParseException("Can not find module \"" + module + "\", please use #include<module> at the top");}
            addModuleUsageToken(mt, moduleToken);
        }
        String type = typeToken.toString();
        String doc = refModule.getTypeToDoc().get(type);
        if (doc == null) {
                CustomParseException ex = generateParseException("Can not find type \"" + (module == null ? "" : (module + ".")) + type + "\", please make sure it was registered");
                if (module == null)  {
                        checkTokenAlternative(ex, type, "string");
                        checkTokenAlternative(ex, type, "int");
                        checkTokenAlternative(ex, type, "float");
                        checkTokenAlternative(ex, type, "UnspecifiedObject");
                        checkTokenAlternative(ex, type, "list");
                        checkTokenAlternative(ex, type, "mapping");
                        checkTokenAlternative(ex, type, "tuple");
                        checkTokenAlternative(ex, type, "structure");
                        for (String mod : includes.keySet()) {
                                if (mod.startsWith(type))
                                        ex.getAltModules().add(mod);
                        }
                }
                for (String tp : refModule.getTypeToDoc().keySet()) {
                        if (tp.startsWith(type))
                                ex.getAltTypes().add(tp);
                }
                {if (true) throw ex;}
        }
        addTypeUsageToken(mt, refModule.getModuleName(), typeToken);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Element of structure. They are separated by semicolon.
 */
  final public void StructItem(KbModule curModule, Map<String, KbModule> includes, ModuleTokens mt) throws ParseException {Token name;
    Type(curModule, includes, mt);
    name = jj_consume_token(S_IDENTIFIER);
  }

  final public void Auth() throws ParseException {Token t;
    jj_consume_token(T_auth);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_required:{
      t = jj_consume_token(T_required);
      break;
      }
    case T_optional:{
      t = jj_consume_token(T_optional);
      break;
      }
    case T_none:{
      t = jj_consume_token(T_none);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Method parses function definition.
 */
  final public void Funcdef(KbModule curModule, Map<String, KbModule> includes, ModuleTokens mt) throws ParseException {Token first;
  String comment = null;
  Token name;
    first = jj_consume_token(T_funcdef);
comment = getLastComment(first);
    name = jj_consume_token(S_IDENTIFIER);
    jj_consume_token(T_round_open_bracket);
    OptNameParams(curModule, includes, mt);
    jj_consume_token(T_round_close_bracket);
    jj_consume_token(T_returns);
    jj_consume_token(T_round_open_bracket);
    OptNameParams(curModule, includes, mt);
    jj_consume_token(T_round_close_bracket);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_auth:{
      Auth();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

/**
 * Method parses input or return parameters of function and elements of tuple.
 */
  final public void OptNameParams(KbModule curModule, Map<String, KbModule> includes, ModuleTokens mt) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_string:
    case T_int:
    case T_float:
    case T_unobj:
    case T_list:
    case T_mapping:
    case T_structure:
    case T_tuple:
    case S_IDENTIFIER:{
      OptNameParam(curModule, includes, mt);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_comma:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        jj_consume_token(T_comma);
        OptNameParam(curModule, includes, mt);
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

/**
 * Method parses one input or return parameter of function and one element of tuple.
 */
  final public void OptNameParam(KbModule curModule, Map<String, KbModule> includes, ModuleTokens mt) throws ParseException {Token nameToken;
  String name = null;
    Type(curModule, includes, mt);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_IDENTIFIER:{
      nameToken = jj_consume_token(S_IDENTIFIER);
name = nameToken.toString();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(T_colon)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SpecParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x200,0xc400,0xc400,0x0,0x0,0x8000000,0xff0000,0x10000000,0xff0000,0x3800,0x400,0x8000000,0xff0000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20,0x0,0x0,0x0,0x2,0x2,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x2,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor. */
  public SpecParser(Provider stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SpecParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SpecParser(String dsl) throws ParseException, TokenMgrException {
      this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
     ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SpecParser(SpecParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SpecParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.RuntimeException { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : SpecParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
